Index: Passport_A38/core/game/map/GameMap.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Passport_A38.core.game.controller;\r\nusing Passport_A38.core.game.gameobject;\r\n\r\nnamespace Passport_A38.core.game.map;\r\n\r\npublic class GameMap\r\n{\r\n    private char[,] _tiles = new char[19, 35];\r\n\r\n    public GameMap(string inputTiles)\r\n    {\r\n        for (int k = 0, t = 0; k < _tiles.GetLength(0); k++)\r\n        {\r\n            for (int i = 0; i < _tiles.GetLength(1); i++, t++)\r\n            {\r\n                _tiles[k, i] = inputTiles[t];\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Gets the counter the player is standing at.\r\n     * Output looks like 4:a for the y level the player is at and if it's the first or the second counter \r\n     */\r\n    public string? GetCounter(Player player)\r\n    {\r\n        if (!PlayerAtCounter(player))\r\n            return null;\r\n\r\n        var counter = player.Pos.Y+\":\";\r\n        \r\n        \r\n\r\n    }\r\n\r\n    /*\r\n     * Returns if the player is standing next to a counter.\r\n     */\r\n    private bool PlayerAtCounter(Player player)\r\n    {\r\n        return _tiles[(int) player.Pos.Y, (int) player.Pos.X - 1] == ']' ||\r\n               _tiles[(int) player.Pos.Y, (int) player.Pos.X + 1] == '[';\r\n    }\r\n\r\n    public char[,] Tiles{\r\n        get => _tiles;\r\n        set => _tiles=value;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Passport_A38/core/game/map/GameMap.cs b/Passport_A38/core/game/map/GameMap.cs
--- a/Passport_A38/core/game/map/GameMap.cs	(revision 9a4b93a266a541d77f43c4c8094a8cdbb1169691)
+++ b/Passport_A38/core/game/map/GameMap.cs	(date 1665778178999)
@@ -1,11 +1,22 @@
-using Passport_A38.core.game.controller;
 using Passport_A38.core.game.gameobject;
 
 namespace Passport_A38.core.game.map;
 
-public class GameMap
+public class GameMap 
 {
     private char[,] _tiles = new char[19, 35];
+    private List<Form> _forms = new();
+    private Dictionary<int, string> _colours = new()
+    {
+        {0,"red"},
+        {1,"green"},
+        {2,"pink"},
+        {3,"blue"},
+        {4,"brown"},
+        {5,"black"},
+        {6,"white"}
+    };
+    private const int seed=5;   //nach seeds drücken 
 
     public GameMap(string inputTiles)
     {
@@ -16,25 +27,65 @@
                 _tiles[k, i] = inputTiles[t];
             }
         }
+
+        var random = new Random(seed);
+        var randNum = random.Next(3,21);
+        _forms.Add(new Form(0,"red","0:a"));    //First counter is always the first one you need to go to
+        for (int i = 1; i < randNum; i++)
+        {
+            Form form = new();
+            var temp = random.Next(1,8)+":"+(random.Next(0,2)==0? "a":"b");    //from first to most upper floor left/right
+            while (_forms[i - 1].Counter.Equals(temp))
+            {
+                temp = random.Next(1,8)+":"+(random.Next(0,2)==0? "a":"b");
+            }
+
+            form.Counter = temp;
+            form.Colour = _colours[random.Next(0,7)];
+            form.Number = i;
+
+            _forms.Add(form);
+        }
     }
 
     /*
      * Gets the counter the player is standing at.
-     * Output looks like 4:a for the y level the player is at and if it's the first or the second counter 
+     * Output looks like 0:a for the floor of the counter the player is at and if it's the left or the right counter 
      */
     public string? GetCounter(Player player)
     {
         if (!PlayerAtCounter(player))
             return null;
 
-        var counter = player.Pos.Y+":";
-        
-        
+        var counter = (CounterCount()- 1)/2 - (player.Pos.Y - 4) / 2 + ":";
+
+        if (player.Pos.X <(double)_tiles.GetLength(1)/2)
+        {
+            return counter + "a";
+        }
+        return counter + "b";
+
+    }
 
+    /*
+     * Returns the number of counters
+     */
+    private int CounterCount()
+    {
+        int num = 0;
+        foreach (var character in _tiles)
+        {
+            if (character.Equals('°'))  //"Kopf" des Counters. Seite egal
+            {
+                num++;
+            }
+        }
+
+        return num;
     }
 
     /*
-     * Returns if the player is standing next to a counter.
+     * Returns whether the player is standing next to a counter or not.
      */
     private bool PlayerAtCounter(Player player)
     {
@@ -42,8 +93,14 @@
                _tiles[(int) player.Pos.Y, (int) player.Pos.X + 1] == '[';
     }
 
-    public char[,] Tiles{
+    public char[,] Tiles
+    {
         get => _tiles;
         set => _tiles=value;
     }
+
+    public List<Form> Forms 
+    {
+        get => _forms;
+    }
 }
\ No newline at end of file
